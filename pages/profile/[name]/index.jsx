import Head from 'next/head';
import Link from "next/link";
import { useRouter } from "next/router";

export default function Profile(props) {

  const getLastXEntries = (entries, number) => {
    let lastEntries = entries.slice(-number).sort((a,b) => {
      return b['start'].localeCompare(a['start']);
    })
    return lastEntries;
  }

  const getScoredArray = (propsArray, column) => {
    let scoredArray = [];
    propsArray.forEach(c => { // get the entries that pertain to each class:
      let filteredEntries = entries.filter(e => {
        return e[column] == c;
      })
      // get average score of these entries
      let score = 0;
      filteredEntries.forEach(e => {
        score += e['score'];
      })
      score = (score / filteredEntries.length).toFixed(2);

      scoredArray.push([c, score]);
    })

    scoredArray.sort((a, b) => { // sort array
      return b[1] - a[1];
    })
    return scoredArray;
  }

  const getOverallScore = () => {
    let score = 0;
    let sampleSize = 100;
    let recentEntries = getLastXEntries(entries, sampleSize);
    recentEntries.forEach(e => {
      console.log(e['score']);
      score += e['score'];
    });
    // average divides by length if number of entries is insufficient
    score = (score / ((sampleSize <= recentEntries.length) ? sampleSize : recentEntries.length)).toFixed(1)
    return score;
  }

  const getDate = (dateTimeString) => {
    let date = dateTimeString.split('T')[0]
    let { year, month, day } = date.split('-');

    return date;
  }

  const router = useRouter();
  const name = router.query.name;
  const { entries, classes, countries } = props;
  const nationality = entries[0]['nationality'];
  const overallScore = getOverallScore(entries);
  const classesWithScores = getScoredArray(classes, 'vehicle_class');
  const countriesWithScores = getScoredArray(countries, 'country');
  const recentEntries = getLastXEntries(entries, 10);

  return (
    <div>
      <Head>
        <title>DR2.0: {name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* profile at a glance: name and score, with flag */}
      <div>
        <h1>{name}</h1>
        <h5>{nationality}</h5>
        <h2>{overallScore}</h2>
      </div>


      {/* score by class */}
      {/* TODO: expand to show vehicle averages */}
      <div>
        <h3>Class performance</h3>
        {classesWithScores.map(e => {
          return (
            <div key={e[0]}>
              <span>{e[0]}</span>
              <span>{e[1]}</span>
            </div>
          )
        })}
      </div>


      {/* score by country */}
      {/* TODO: expand to show stage averages */}
      <div>
        <h3>Country performance</h3>
        {countriesWithScores.map(e => {
          return (
            <div key={e[0]}>
              <span>{e[0]}</span>
              <span>{e[1]}</span>
            </div>
          )
        })}
      </div>


      {/* recent challenges */}
      <div>
        <h3>Recent challenges</h3>
        <table border="1">
          <tr>
            <td>Date</td>
            <td>Country</td>
            <td>Stage</td>
            <td>Class</td>
            <td>Vehicle</td>
            <td>Time</td>
            <td>Score</td>
          </tr>
          {recentEntries.map((entry, i) => {
            return (
              <tr key={i}>
                <td>{getDate(entry['start'])}</td>
                <td>{entry['country']}</td>
                <td><Link href={`/stage/${entry['stage']}`}>{entry['stage']}</Link></td>
                <td>{entry['vehicle_class']}</td>
                <td><Link href={`/vehicle/${entry['vehicle']}`}>{entry['vehicle']}</Link></td>
                <td>{entry['time']}</td>
                <td>{entry['score'].toFixed(2)}</td>
              </tr>
            )
          })}
        </table>
      </div>
    </div>
  )
}









export async function getServerSideProps(context) {
  const mysql = require('mysql2/promise');
  // use connection pool instead to make it faster, make previous connection reusable
  const conn = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    database: 'dr2',
    password: 'password'
  });
  const [entries, entryFields] = JSON.parse(JSON.stringify(await conn.execute("SELECT * FROM leaderboard INNER JOIN challenges ON leaderboard.challenge_id = challenges.id WHERE name=?", [context.query.name])))
  const [classes, classFields] = JSON.parse(JSON.stringify(await conn.execute("SELECT DISTINCT vehicle_class FROM leaderboard INNER JOIN challenges ON leaderboard.challenge_id = challenges.id WHERE name=?", [context.query.name])))
  const [countries, countryFields] = JSON.parse(JSON.stringify(await conn.execute("SELECT DISTINCT country FROM leaderboard INNER JOIN challenges ON leaderboard.challenge_id = challenges.id WHERE name=?", [context.query.name])))

  return {
    props: {
      "entries": entries,
      "classes": classes.map(c => { return c['vehicle_class'] }),
      "countries": countries.map(c => { return c['country'] }),
    }
  }

}