// https://www.youtube.com/watch?v=eWObYvG0-lI&ab_channel=AdoKukic
// https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration

// npm run dev  => localhost:3000


import { resolveHref } from 'next/dist/shared/lib/router/router';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';




export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>DR2.0 Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        {/* highest average scorers */}
        <table>
          <thead> {/* change this to a component that takes in number of props as header titles */}
            <tr>
              <th>Place</th>
              <th>Name</th>
              <th>Nationality</th>
              <th>Score</th>
            </tr>
          </thead>
          <tbody>

          </tbody>
        </table>

        <button onClick={()=> {
          fetch('./api/challenges')
          .then((data) => {
            console.log(data);
          })
        
        }}>click</button>




      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

/*
export async function getServerSideProps() {

  // put code for accessing the DB and getting the raw data here
  // or a reference to a separate backend code?

  return {
    props: {
      // raw data in object format, as a simple variable(s)
    }
  }
}
*/